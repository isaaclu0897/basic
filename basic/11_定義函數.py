# -*- coding: utf-8 -*-
"""
Created on Wed Aug 23 20:08:56 2017

@author: VX
"""
#==============================================================================
# 定义函数
#==============================================================================
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x

print(my_abs(-20))
# return 功用是結束函數，並返回其值，若無return 則返回None
def my_abs(x):
    if x >= 0:
         x
    else:
         -x

print(my_abs(-20))

#==============================================================================
# 空函数
#==============================================================================
# 空函數可定義為下，其功用為跳過當下，例如程式碼還沒想好怎麼寫可以用pass
def nop():
    pass
age = 0
if age >= 18:
    pass

#==============================================================================
# 參數檢查
#==============================================================================
# 便於使用者debug，my_abs 與abs 不同，其原因為當初沒有定義完全，因此我們可以這樣改
def my_abs(x):
    if not isinstance(x, (int, float)):    # isinstance(object, classinfo) 判斷 object 是否為 classinfo 的實體
        raise TypeError('bad operand type')# raise 陳述
    if x >= 0:
        return x
    else:
        return -x
    
# my_abs('1')

#==============================================================================
# 返回多个值
#==============================================================================
# 在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标
import math

def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny

x, y = move(100, 100, 60, math.pi / 6)
print(x, y)

'''
其實我們並不能一次傳回多個值，事實上程式碼是將return 傳回的值，
存到tuple中，再將tuple的值賦給了一個變數，最後此變數被打印出來，如下。
'''

a = (x, y)
j, k = a 
print(j, k)

''' 小結
1. 定义函数时，需要确定函数名和参数个数；
2. 如果有必要，可以先对参数的数据类型做检查；
3. 函数体内部可以用return随时返回函数结果；
4. 函数执行完毕也没有return语句时，自动return None。
5. 函数可以同时返回多个值，但其实就是一个tuple。
'''


















