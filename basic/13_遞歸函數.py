# -*- coding: utf-8 -*-
"""
Created on Sun Aug 27 14:41:49 2017

@author: wei
"""

#==============================================================================
# 遞歸函數
#==============================================================================
''' 
1. 遞歸函數簡單，邏輯清晰，甚至比循環函數還清晰。
2. 但遞歸函數會有(stack)溢出的問題，fact(1000)報錯。
3. 尾遞歸可以解決(stack)溢出的問題，但python不支援。
4. 尾遞歸可以完全取代循環語句，有些語言沒有循環就用尾遞歸。

'''
'''
階乘 n! = 1 x 2 x 3 x ... x n，我們定義一個函數叫做 fact()，
fact(n) = n x fact(n-1)，但 n=1 時，我們需要將函式特別處理，
定義如下。
'''

def fact(n):
    if n==1:
        return 1
    return n * fact(n-1)

print(fact(5))

'''
===> fact(5)
===> 5 * fact(4)
===> 5 * (4 * fact(3))
===> 5 * (4 * (3 * fact(2)))
===> 5 * (4 * (3 * (2 * fact(1))))
===> 5 * (4 * (3 * (2 * 1)))
===> 5 * (4 * (3 * 2))
===> 5 * (4 * 6)
===> 5 * 24
===> 120
'''
'''
通過尾遞歸優化可以防止stack 溢出，
尾遞歸是在函數return時，調用自身，且return不能有表達式，
這樣無論遞歸多少次，都只占用一個stack
代碼如下
'''
# 但大多數語言包括pythoon都沒有對尾遞歸優化，改了也沒用
def fact(n):
    return fact_iter(n, 1)

def fact_iter(num, product):
    if num == 1:
        return product
    return fact_iter(num - 1, num * product)

print(fact(1000))



































