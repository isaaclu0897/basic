# -*- coding: utf-8 -*-
"""
Created on Wed Aug 23 22:10:13 2017

@author: VX
"""

#==============================================================================
# 函数的参数
#==============================================================================

# 函數的參數共有4+1種，位置、默認(1)、可變、關鍵字、命名關鍵字參數。
#==============================================================================
# 位置參數
#==============================================================================
# 定義一個 X ** 2 函數
def power(x):
    return x * x

print(power(5))

# 但這樣定義似乎不夠通用，我們將定義改改，定義一個 power(x, n) 計算 x ** n
def power(x, n):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s

print(power(5, 3))

# 注意，位置參數必須按照順序給出

#==============================================================================
# 默認參數
#==============================================================================
'''
雖然上面那樣改，函數變的通用了，但舊的power卻不能用了，為了我們可以更方便的使用函數，
我們定義將默認參數加進去，這樣即變參數部打出來，函數也會執默認的參數。
'''
def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s

print(power(5))
print(power(5, 2))

''' 默認參數要點
1. 位置參數需再默認參數前。
2. 設置默認參數的時候重要的、變化大得要放前面，變化小的作默認參數。
3. 默認參數降低函數的使用難度
'''
def enroll(name, gender, age=6, city='Beijing'):
    return 'name:{}'.format(name), 'gender:{}'.format(gender), 'age:{}'.format(age), 'city:{}'.format(city)

print(enroll('Sarah', 'F')) # 默認參數不填會默認
print(enroll('Adam', 'M', city='Tianjin')) # 默認參數也可自己加

# 默認參數很好用，但若使用不當也會產生很多問題
def add_end(L=[]):
    L.append('END')
    return L
# 正常使用時
print( add_end([1, 2, 3]))
print(add_end(['x', 'y', 'z']))
print(add_end())
print(add_end()) # 在這裡就發錯誤了

'''
發生錯誤的原因為，第一行式子結束後，L = []，這個list便存在了，且裡面有 'END'，
而後的第二行，程式判定我們建立的函數為默認函數，因此不改變L = ['END']，
直接在裏頭又加上了第二個['END']，因此我們必須這樣改改，在定義中加入判斷式，
所以默認參數必須指向為不可變 如: None, 字串''。
'''
def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L

print(add_end())
print(add_end())

#==============================================================================
# 可變參數
#==============================================================================
# 參數個數不限制，不需要用到list 或 tuple就能傳入多個參數
# 沒有可變參數，下面的函式傳入須為 list 或 tuple
def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum

print(calc([1, 2, 3, 4]))
# 若有可變參數，可簡化函式
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum

print(calc(1, 2, 3, 4))
# 若函式為可變參數，想傳入 list 或tuple 可以這樣寫
nums = [1, 2, 3, 4]
print(calc(nums[0], nums[1], nums[2], nums[3]))

# 也可以這樣寫(更好)，這種寫法相當好用
print(calc(*nums))
print(calc()) # 可為零個參數

#==============================================================================
# 关键字参数
#==============================================================================
'''
关键字参数允许你传入0个或任意个含参数名的参数，
这些关键字参数在函数内部自动组装为一个dict。
'''
'''
1. 關鍵字參數可以收到使用者額外給的訊息
2. 關鍵字參數的用法和可變參數類似，但關鍵字參數傳入的式dict
3. 關鍵字參數得到的是一分複製品，改動並不會影響原變數
'''
def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)
# 可不傳入參數
person('Michael', 30)

# 可傳入多個參數，但都歸類到關鍵字參數中，用dict包起來
person('Bob', 35, city='Beijing', job='Enguneer')

# 傳入dict方法
extra = {'city': 'Beijing', 'job': 'Engineer'}
person('Jack', 24, city=extra['city'], job=extra['job'])
person('Jack', 24, **extra)

#==============================================================================
# 命名关键字参数
#==============================================================================
'''
當我們使用關鍵字參數的時候，使用者可以不受控制的輸入任何參數，
因此我們使用命名關鍵字參數，限制使用者傳入我們所預期的關鍵字參數。
'''
'''
1. 傳入額外、過少的參數都會報錯
2. 且必須傳入參數名，這和位置參數不同
3. 使用命名關鍵字參數一定要加 * ，否則程式會誤判為位置參數。
4. 命名關鍵字參數可以當作關鍵字參數，和關鍵字參數一起輸出。
'''
def person(name, age, **kw):
    if 'city' in kw:
        # 有city参数
        pass
    if 'job' in kw:
        # 有job参数
        pass
    print('name:', name, 'age:', age, 'other:', kw)

person('Jack', 24, city='Beijing', addr='Chaoyang', zipcode=123456) # 仍然傳出zipcode

# 在 * 後面的參數都是命名關鍵字參數，這時傳入額外或過少的參數都會報錯(可在定義加上關鍵字參數)
def person(name, age, *, city, job):
    print(name, age, city, job)
    
person('Jack', 24, city='Beijing', job='')
# person('Jack', 24, city='Beijing', 'Chaoyang'(無參數名), zipcode=123456(過多的參數))

# 若參數中已有可變參數，可變參數後面的命名關鍵參數便不需要 *，可以這樣寫
def person(name, age, *args, city='taipei', job, **kw): # 默認參數也可以在命名關鍵字參數中使用
    print(name, age, args, city, job, kw)
    print(type(job))
kw = {'city':'gg', 'job':'job'} # 非常特別的用法
person('tony', 20, 1, 2, 3, 4, **kw)

#==============================================================================
# 參數順序
#==============================================================================
# 参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
# 其實默認參數也可以加在命名關鍵字參數中
def f1(a, b, c='默認位置', *args, **kw):
    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)

def f2(a, b, c='默認位置', *arggg, d, e='默認命名關鍵字', **kw):
    print('a =', a, 'b =', b, 'c =', c, 'arggg =', arggg, 'd =', d, 'e =', e, 'kw =', kw)
    
f1(1, 2)
# a = 1 b = 2 c = 默認位置 args = () kw = {}
f1(1, 2, c=3)
# a = 1 b = 2 c = 3 args = () kw = {}

f1(1, 2, 3, 'a', 'b')
# a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
f1(1, 2, 3, 'a', 'b', x=99)
# a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}

f2(1, 2, d=99, ext=None)
# a = 1 b = 2 c = 默認位置 d = 99 e = 默認命名關鍵字 kw = {'ext': None}
f2(1, 2, d=99, e=50, ext=None)
# a = 1 b = 2 c = 默認位置 d = 99 e = 50 kw = {'ext': None}

# 有趣的是我們也可以使用tuple和dict來使以上函數
args = (1, 2, 3, ['a', 'b'])
kw = {'d': 99, 'x': '#'}
f1(*args, **kw)
# a = 1 b = 2 c = 3 args = (['a', 'b'],) kw = {'d': 99, 'x': '#'}

args = (1, 2, 3, ['a', 'b'])
kw = {'d': 88, 'x': '#'}
f2(*args, **kw)
# a = 1 b = 2 c = 3 arggg = (['a', 'b'],) d = 88 e = 默認命名關鍵字 kw = {'x': '#'}

''' 小結
1. 默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！
2. *args是可变参数，args接收的是一个tuple。
3. **kw是关键字参数，kw接收的是一个dict。
4. 命名關鍵字參數可以當作關鍵字參數，和關鍵字參數一起輸出。
'''








